<?php
/**
 * @author FFPL (fued.felipe@hotmail.com)
 * @version 1.0a
 * Util Functions to use in general projects.
 * The contructor may be initalized with parameters to criptographic functions
 * @var string optinal Algorithm to use in crypto function - You may use the function Utils::listAlgorithms() to get a list of availble algorithms - default is MCRYPT_3DES.
 * @var string optional Mode to use in crypto function - You may use the function Utils::listModes() to get a list of availble modes - default mode is ECB.
 * */
class Utils extends Crypt {
	/**
	 * Starts the contructor. If you will use the crypto function you have to set the parameters which you will need.
	 * @var string Algorithm to use in crypto function - You may use the function Utils::listAlgorithms() to get a list of availble algorithms - default is MCRYPT_3DES.
	 * @var string Mode to use in crypto function - You may use the function Utils::listModes() to get a list of availble modes - default mode is ECB.
	 * */
	public function __contruct($algo = null, $mode = null) {
		if (!is_null($algo) && !is_null($mode)) :
			parent::__construct($algo, $mode);
		else :
			parent::__construct();
		endif;
	}

	/** @var mixed Accepts multi vars to debug
	 * 	@return String Returns the var_dump of the variables 
	 **/
	public static function debugMulti() {
		echo "<pre>";
		$num = 0;
		foreach (func_get_args() as $k) :
			$num += 1;
			echo "Variable #{$num}<br>";
			highlight_string(var_dump($k));
			echo "<br><hr>";
		endforeach;
		echo "</pre>";
	}

	/**
	 * @var string plain text of key
	 * @return string base64 of the key coded
	 **/
	final public function encodeKey($key) {
		$t = date("H=i=s");
		// dynamic key generator requires the minimum size password length 8 characters
		$string = $key;
		$key = $t;
		for ($i = 0; $i < strlen($string); $i++)
			for ($j = 0; $j < strlen($key); $j++)
				$string[$i] = $string[$i] ^ $key[$j];

		$k = base64_encode($string) . "@@" . base64_encode($t);
		//the separetor is @@

		return base64_encode($k);
	}

	/**
	 * @var string base64 generated by encodeKey($key)
	 * @return string base64 of the key
	 **/
	final public function decodeKey($key) {
		$k = base64_decode($key);
		$t = explode("@@", $k);
		$key = base64_decode($t[1]);
		$string = base64_decode($t[0]);

		for ($i = 0; $i < strlen($string); $i++)
			for ($j = 0; $j < strlen($key); $j++)
				$string[$i] = $key[$j] ^ $string[$i];

		return base64_encode($string);
	}
}
?>